<?xml version="1.0" encoding="UTF-8"?>
<!--
	配置文件自动热加载:
		要使配置文件自动重载，需要把 scan 属性设置为 true，默认情况下每分钟才会扫描一次，可以指定扫描间隔：
		可用的单位是 milliseconds，seconds，minutes 和 hours。如果只指定了数字，但没有指定单位，这默认单位为 milliseconds。

	如果 logback 在启动时，解析配置文件时，出现了需要警告的信息或者错误信息，那 logback 会自动先打印出自身的状态信息。
		debug =true：如果希望正常情况下也打印出状态信息，则可以使用之前提到的方式，在代码里显式地调用使其输出：
-->
<configuration scan="true" scanPeriod="60 seconds" debug="false">
	<!--优先级从高到低分别是：ERROR > WARN > INFO > DEBUG -->
	<!--格式说明
		%m：输出代码中指定的消息
		%p：输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL
		%r：输出自应用启动到输出该log信息耗费的毫秒数
		%c：输出所属的类目，通常就是所在类的全名
		%t：输出产生该日志事件的线程名
		%n：输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n”
		%d：输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss,SSS}，输出类似：2002年10月18日 22：10：28，921
		%l：输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java:10)
	-->

	<property name="server.name" value="butler" />
	<property name="log.path" value="D://log/${server.name}" />
	<property name="log.level" value="debug" />
	<!-- 多环境配置 -->
<!-- 	<springProfile name="default">
		<property name="log.path" value="D:\log\${server.name}" />
		<property name="log.level" value="debug" />
	</springProfile> -->

	<!--输出到控制台 -->
	<appender name="console" class="ch.qos.logback.core.ConsoleAppender">
		<encoder>
			<!--<pattern>%d{yyyy-MM-dd HH:mm:ss} [%p] [%t] %c - %m%n</pattern>-->
			<pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] [%-5level] [%logger{50}] - %msg%n</pattern>
		</encoder>
	</appender>

	<!-- info级别日志控制 -->
	<appender name="info_file" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 文件路径 -->
		<file>${log.path}/info.log</file>
		<!-- 是否追加 默认为true -->
		<append>true</append>
		<!-- 滚动策略 日期+大小 策略 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>${log.path}/%d{yyyy-MM-dd}/info/info-%i.zip</fileNamePattern>
			<!-- 单个日志大小 -->
			<maxFileSize>20MB</maxFileSize>
			<!-- 日志保存周期天 -->
			<maxHistory>15</maxHistory>
			<!-- 总大小 -->
			<totalSizeCap>5GB</totalSizeCap>
		</rollingPolicy>
		<!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
		<encoder>
			<pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] [%-5level] [%logger{50}] - %msg%n</pattern>
		</encoder>
		<!-- 级别过滤 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>INFO</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>
	<!-- warn级别日志控制 -->
	<appender name="warn_file" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 文件路径 -->
		<file>${log.path}/warn.log</file>
		<!-- 是否追加 默认为true -->
		<append>true</append>
		<!-- 滚动策略 日期+大小 策略 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>${log.path}/%d{yyyy-MM-dd}/warn/warn-%i.zip</fileNamePattern>
			<!-- 单个日志大小 -->
			<maxFileSize>20MB</maxFileSize>
			<!-- 日志保存周期 -->
			<maxHistory>15</maxHistory>
			<!-- 总大小 -->
			<totalSizeCap>5GB</totalSizeCap>
		</rollingPolicy>
		<!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
		<encoder>
			<pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] [%-5level] [%logger{50}] - %msg%n</pattern>
		</encoder>
		<!-- 级别过滤 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>WARN</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>
	<!-- error级别日志控制 -->
	<appender name="error_file" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<!-- 文件路径 -->
		<file>${log.path}/error.log</file>
		<!-- 是否追加 默认为true -->
		<append>true</append>
		<!-- 滚动策略 日期+大小 策略 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
			<fileNamePattern>${log.path}/%d{yyyy-MM-dd}/error/error-%i.zip</fileNamePattern>
			<!-- 单个日志大小 -->
			<maxFileSize>20MB</maxFileSize>
			<!-- 日志保存周期 -->
			<maxHistory>15</maxHistory>
			<!-- 总大小 -->
			<totalSizeCap>5GB</totalSizeCap>
		</rollingPolicy>
		<!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符-->
		<encoder>
			<pattern>[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] [%-5level] [%logger{50}] - %msg%n</pattern>
		</encoder>
		<!-- 级别过滤 -->
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
	</appender>

	<!-- 发送日志文件到邮件 -->
	<appender name="email" class="ch.qos.logback.classic.net.SMTPAppender">
		<!-- 最小输出日志级别 -->
		<param name="Threshold" value="ERROR" />
		<!-- 缓冲Event个数默认512 当达到了多少个就覆盖以前的Event 而非网络上所说的缓冲数据大小 不看源码坑出血 -->
		<param name="BufferSize" value="512" />
		<!-- 错误个数默认一个 即出现错误就发送邮件 -->
		<param name="ErrorSize" value="1" />
		<!-- 发送邮件的协议类型 QQ使用smtps加密 163使用smtp-->
		<param name="SMTPProtocol" value="smtps" />
		<!-- 发送端口 QQ使用465 163使用25-->
		<param name="SMTPPort" value="465" />
		<!-- 发送日志邮箱SMTP -->
		<param name="SMTPHost" value="smtp.qq.com" />
		<!-- 发送日志的邮箱 -->
		<param name="From" value="819285335@qq.com" />
		<!-- 发送日志的邮箱用户名 -->
		<param name="SMTPUsername" value="819285335@qq.com" />
		<!-- 发送日志的邮箱密码 -->
		<param name="SMTPPassword" value="gsrarlgxeaslbbgj" />
		<!-- 日志邮件主题 -->
		<param name="Subject" value="Butler Service System Error Please Handle" />
		<!-- 日志邮件接收者 -->
		<param name="To" value="29506564@qq.com" />
		<!-- 抄送邮件接受者 -->
		<!-- 	<param name="Bcc" value="819285335@qq.com"/> -->
		<!-- 日志输出布局 -->
		 <!-- <layout class="ch.qos.logback.classic.encoder.PatternLayoutEncoder"> --> 
		<layout class="org.apache.log4j.PatternLayout"> 
	<!-- 		<param name="ConversionPattern" value="%-d{yyyy-MM-dd HH:mm:ss} [%p] [%c] %m%n" /> -->
			<param name="ConversionPattern" value="[%d{yyyy-MM-dd HH:mm:ss.SSS}] [%thread] [%-5level] [%logger{50}] - %msg%n" />
		</layout>
	</appender>

	<!-- 异步发送邮件设置 -->
	<appender name="asyncout" class="org.apache.log4j.AsyncAppender">
		<appender-ref ref="email" />
	</appender>

	<!-- 默认环境 -->
<!-- 	<springProfile name="default"> -->
		<!-- 特殊处理 -->
		<logger name="org.xnio.nio" level="DEBUG" />
		<logger name="org.springframework" level="DEBUG" />
		<logger name="org.system" level="DEBUG" />
		 <!--添加appender-->
		<root level="${log.level}">
			<appender-ref ref="console" />
			<appender-ref ref="info_file" />
			<appender-ref ref="warn_file" />
			<appender-ref ref="error_file" />
		</root>
<!-- 	</springProfile> -->

</configuration>